
@{
    ViewData["Title"] = "ApiEdit";
    Layout = "~/Views/Shared/_IframeLayout.cshtml";
}

<div class="layui-form layuimini-form" id="ApiEdit" lay-filter="ApiEdit">
    <div class="layui-form-item">
        <label class="layui-form-label required">接口分组</label>
        <div class="layui-input-block">
            <!--Post,Get,Put,Delete-->
            <select name="GroupId" id="GroupId" lay-verify="required" lay-reqtext="接口分组不能为空" class="layui-select"></select>
        </div>
    </div>
    <div class="layui-form-item">
        <label class="layui-form-label required">接口名</label>
        <div class="layui-input-block">
            <input type="text" name="ApiName" lay-verify="required" lay-reqtext="接口名不能为空" placeholder="请输入接口名" value="" class="layui-input">
        </div>
    </div>
    <div class="layui-form-item">
        <label class="layui-form-label required">接口类型</label>
        <div class="layui-input-block">
            <!--0=公共接口；1=对内接口-->
            <input type="radio" name="ApiKind" value="0" title="公开接口" checked="">
            <input type="radio" name="ApiKind" value="1" title="对内接口">
        </div>
    </div>
    <div class="layui-form-item">
        <label class="layui-form-label required">授权访问</label>
        <div class="layui-input-block">
            <!--0=否；1=是-->
            <input type="radio" name="IsAuth" value="0" title="否" checked="">
            <input type="radio" name="IsAuth" value="1" title="是">
        </div>
    </div>
    <div class="layui-form-item">
        <label class="layui-form-label required">请求方法</label>
        <div class="layui-input-block">
            <!--Post,Get,Put,Delete-->
            <select name="Method" class="layui-select">
                <option value="Post">Post</option>
                <option value="Get">Get</option>
                <option value="Put">Put</option>
                <option value="Delete">Delete</option>
            </select>
        </div>
    </div>
    <div class="layui-form-item">
        <label class="layui-form-label required">提交类型</label>
        <div class="layui-input-block">
            <!--空,FromForm,FromBody-->
            <select name="PostFrom" class="layui-select">
                <option value="">空</option>
                <option value="FromBody">FromBody</option>
                <option value="FromForm">FromForm</option>
            </select>
            <tip>针对Post和Put</tip>
        </div>
    </div>
    <div class="layui-form-item">
        <label class="layui-form-label required">操作类型</label>
        <div class="layui-input-block">
            <!--
            1=单一结果(单个值，或者一条sql语句执行结果)
            2=分页
            3=列表结果集（多个值以List<object>返回
            4=字典结果集（多个值以Dictionary<string,object>返回
            5=主从结果集 （会查询嵌套子查询，多个值以Dictionary<string,object>返回
            6=返回脚本执行结果（直接返回脚本执行结果）
                        -->
            <select name="CodeKind" class="layui-select">
                <option value="1">分页</option>
                <option value="2">结果集-字典</option>
                <option value="3">结果集-列表</option>
                <option value="4">脚本结果</option>
            </select>
        </div>
    </div>
    <div class="layui-form-item">
        <label class="layui-form-label required">参数检查脚本</label>
        <div class="layui-input-block">
            <div>
                <span style="color:#0A14FB;font-weight:bold">function</span> func(params,bodyJson)
            </div>
            <textarea name="CheckScript" id="CheckScript" placeholder="Lua脚本检查参数" rows="6" class="layui-textarea">
  local pass=true
  local err="验证错误"
  --逻辑代码
  return pass,err
            </textarea>
            <div style="color:#0A14FB;font-weight:bold">end</div>
            <tip>检查传入参数合法性</tip>
        </div>
    </div>
    <div class="layui-form-item">
        <label class="layui-form-label required">Sql构建脚本</label>
        <div class="layui-input-block">
            <div>
                <a id="exeApiBtn" class="layui-btn layui-btn-xs">执行接口语句</a>
                <a id="exeSqlBtn" class="layui-btn layui-btn-xs">Sql执行语句</a>
                <a id="objToStrBtn" class="layui-btn layui-btn-xs">C#对象转字符串Lua代码</a>
                <a id="evalBtn" class="layui-btn layui-btn-xs">执行字符串Lua代码</a>
                <a id="newIdBtn" class="layui-btn layui-btn-xs">生成Id</a>
                <a id="tipsBtn" class="layui-btn layui-btn-xs">?</a>
            </div>
            <div>
                <span style="color:#0A14FB;font-weight:bold">function</span> func(params,bodyJson)
            </div>
            <textarea name="ScriptCode" id="ScriptCode" placeholder="Lua脚本构建Sql" rows="6" class="layui-textarea">
   local sql=""
   --逻辑代码
   --CodeKind：1=列表，2=单行，3=是否存在（true|false），4=记录条数，5=单个值，6=返回受影响记录数;
   --Sql:执行的SQL语句
   --ExtraParams：扩展参数，如：ExtraParams={a=1,b="额外参数"}
   --Key：字符串，查询结果Key，字典返回时作为字典Key
   --Children：包含的从表查询（嵌套多层查询）
   --RelationKeys：关系Key，主从查询中作为从查询条件，自动从主查询结果中取对应值
   return {Sql=sql,Key="",CodeKind=必传,Children={{Sql="",CodeKind=必传,RelationKeys={"关联字段1","关联字段1"…},ExtraParams={c=1,d="额外参数"}},{…}},ExtraParams={a=1,b="额外参数"}},{Sql="",CodeKind=必传,ExtraParams={c=1,d="额外参数"}}
            </textarea>
            <div style="color:#0A14FB;font-weight:bold">end</div>
            <tip>根据传入参数构建sql语句</tip>
        </div>
    </div>
    <div class="layui-form-item">
        <label class="layui-form-label">扩展程序集</label>
        <div class="layui-input-block">
            <input type="text" name="PluginAssemblyPath" placeholder="扩展程序集" value="" class="layui-input">
        </div>
    </div>
    <div class="layui-form-item">
        <label class="layui-form-label">扩展程序类名</label>
        <div class="layui-input-block">
            <input type="text" name="PluginClassName" placeholder="扩展程序类名" value="" class="layui-input">
        </div>
    </div>
    <div class="layui-form-item">
        <label class="layui-form-label required">状态</label>
        <div class="layui-input-block">
            <!--0=公共接口；1=对内接口-->
            <input type="radio" name="Status" value="0" title="停用" checked="">
            <input type="radio" name="Status" value="1" title="启用">
        </div>
    </div>
    <div class="layui-form-item">
        <label class="layui-form-label">接口说明</label>
        <div class="layui-input-block">
            <textarea name="Description" class="layui-textarea" placeholder="接口说明" rows="3"></textarea>
        </div>
    </div>
    <div class="layui-form-item">
        <div class="layui-input-block">
            <button class="layui-btn" lay-submit lay-filter="saveBtn">确认保存</button>
        </div>
    </div>
    <input id="ApiIdCode" name="ApiIdCode" type="hidden" value="@ViewData["ApiIdCode"]" />
</div>
@section Links{
    <link rel="stylesheet" href="~/lib/codemirror/lib/codemirror.css">
    <link rel="stylesheet" href="~/lib/codemirror/theme/neat.css">
}
@section Scripts{
    <script src="~/lib/codemirror/lib/codemirror.js"></script>
    <script src="~/lib/codemirror/addon/edit/matchbrackets.js"></script>
    <script src="~/lib/codemirror/mode/lua.js"></script>
    <script>
        var checkScriptEditor = CodeMirror.fromTextArea(document.getElementById("CheckScript"), {
            matchBrackets: true,
            theme: "neat"
        });
        var scriptCodeEditor = CodeMirror.fromTextArea(document.getElementById("ScriptCode"), {
            matchBrackets: true,
            theme: "neat"
        });

    </script>
    <script>
        var apiIdCode = "@ViewData["ApiIdCode"]";
        layui.use(['form'], function () {
            var form = layui.form,
                layer = layui.layer,
                $ = layui.$;

            //监听提交
            form.on('submit(saveBtn)', function (data) {
                data.field["CheckScript"] = checkScriptEditor.getValue();
                data.field["ScriptCode"] = scriptCodeEditor.getValue();
                $.ajax({
                    url: "/api/Config/SaveApi",
                    data: JSON.stringify(data.field),
                    type: "Post",
                    dataType: "json",
                    contentType: 'application/json',
                    success: function (res) {
                        if (res.code == 0) {
                            //var table = parent.layui.table;
                            //table.reload("apiTableId", {});
                            //window.parent.location.reload();//修改成功后刷新父界面
                            window.parent.postMessage("refreshApiList", "*");
                            var iframeIndex = parent.layer.getFrameIndex(window.name);
                            parent.layer.close(iframeIndex);
                        } else if (res.code == 1) {
                            top.location.href = "/Login/SignIn";
                        } else {
                            layer.alert('错误：'+res.message);
                        }
                    },
                    error: function (res) {
                        layer.alert('错误：'+ res);
                    }
                });

                return false;
            });

            $.ajax({
                url: "/api/Config/AllGroup",
                data: null,
                type: "Get",
                dataType: "json",
                success: function (res) {
                    var select = $("#GroupId").get(0);
                    for (var i = 0; i < res.data.length; i++) {
                        var group = res.data[i];
                        select.options.add(new Option(group["GroupName"], group["GroupId"]));
                    }
                    form.render('select', "ApiEdit");
                    if (apiIdCode != "") {
                        $.ajax({
                            url: "/api/Config/" + apiIdCode,
                            data: null,
                            type: "Get",
                            dataType: "json",
                            success: function (res) {
                                if (res.code == 0) {
                                    form.val("ApiEdit", res.data);
                                    checkScriptEditor.setValue(res.data["CheckScript"]);
                                    scriptCodeEditor.setValue(res.data["ScriptCode"]);
                                 } else if (res.code == 1) {
                                    top.location.href = "/Login/SignIn";
                                 } else {
                                    layer.alert('错误：'+res.message);
                                 }

                            },
                            error: function (res) {
                                layer.alert('错误：'+res);
                            }
                        });
                    }
                },
                error: function (res) {
                    layer.alert('错误：'+res);
                }
            });

            $("#exeApiBtn").on("click", function () {
                var str = "--执行已配置接口\n--code为接口编码\n--tableParams为传入参数\n--返回执行结果\nexecuteCS(code,tableParams)";
                $("#ScriptCode").val(scriptCodeEditor.getValue());
                insertText($("#ScriptCode").get(0), str);
                scriptCodeEditor.setValue($("#ScriptCode").val());
            });
            $("#exeSqlBtn").on("click", function () {
                var str = "--执行Sql语句\n--sql为sql语句代码\n--sqlKind为1=列表，2=单行，3=是否存在（true|false），4=记录条数，5=单个值，6=返回受影响记录数； \n--tableParams为SQL语句执行参数\n--返回执行结果\nexecuteSQL(sql,sqlKind,tableParams)";
                $("#ScriptCode").val(scriptCodeEditor.getValue());
                insertText($("#ScriptCode").get(0), str);
                scriptCodeEditor.setValue($("#ScriptCode").val());
            });
            $("#newIdBtn").on("click", function () {
                var str = "--生成Id\nnewId()";
                $("#ScriptCode").val(scriptCodeEditor.getValue());
                insertText($("#ScriptCode").get(0), str);
                scriptCodeEditor.setValue($("#ScriptCode").val());
            });
            $("#objToStrBtn").on("click", function () {
                var str = "--C#对象转字符串lua代码\n\objectToString(obj)";
                $("#ScriptCode").val(scriptCodeEditor.getValue());
                insertText($("#ScriptCode").get(0), str);
                scriptCodeEditor.setValue($("#ScriptCode").val());
            });
            $("#evalBtn").on("click", function () {
                var str = "--执行字符串lua代码\n\eval(str)";
                $("#ScriptCode").val(scriptCodeEditor.getValue());
                insertText($("#ScriptCode").get(0), str);
                scriptCodeEditor.setValue($("#ScriptCode").val());
            });

            $("#tipsBtn").on("click", function () {
                layer.tips(" --CodeKind：1=列表，2=单行，3=是否存在（true|false），4=记录条数，5=单个值，6=返回受影响记录数;<br/><br/>--Sql:执行的SQL语句\n--ExtraParams：扩展参数，如：ExtraParams={a=1,b=\"额外参数\"}<br/><br/>--Key：字符串，查询结果Key，字典返回时作为字典Key<br/><br/>--Children：包含的从表查询（嵌套多层查询）<br/><br/>--RelationKeys：关系Key，主从查询中作为从查询条件，自动从主查询结果中取对应值", '#tipsBtn', {
                    closeBtn: true,
                    time: 0,
                    skin: 'layui-layer-rim',
                    tips: [3, "#B9DBC3"]
                });
            });
        });

        function insertText(obj, str) {
            if (document.selection) {
                var sel = document.selection.createRange();
                sel.text = str;
            } else if (typeof obj.selectionStart === 'number' && typeof obj.selectionEnd === 'number') {
                var startPos = obj.selectionStart,
                    endPos = obj.selectionEnd,
                    cursorPos = startPos,
                    tmpStr = obj.value;
                obj.value = tmpStr.substring(0, startPos) + str + tmpStr.substring(endPos, tmpStr.length);
                cursorPos += str.length;
                obj.selectionStart = obj.selectionEnd = cursorPos;
            } else {
                obj.value += str;
            }
        }
    </script>
}

